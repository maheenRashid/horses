require 'nn';
require 'cudnn';
require 'cunn';

function makeXavierGaussian(model)
    for idx=1,#model do
        local m = model.modules[idx]
        if m.weight then
            local var=nil;
            if m.__typename == 'nn.SpatialConvolution' then
                var = {m.nInputPlane*m.kH*m.kW, m.nOutputPlane*m.kH*m.kW}
            elseif m.__typename == 'nn.SpatialConvolutionMM' then
                var = {m.nInputPlane*m.kH*m.kW, m.nOutputPlane*m.kH*m.kW}
            elseif m.__typename == 'nn.LateralConvolution' then
                var = {m.nInputPlane*1*1, m.nOutputPlane*1*1}
            elseif m.__typename == 'nn.VerticalConvolution' then
                var = {1*m.kH*m.kW, 1*m.kH*m.kW}
            elseif m.__typename == 'nn.HorizontalConvolution' then
                var = {1*m.kH*m.kW, 1*m.kH*m.kW}
            elseif m.__typename == 'nn.Linear' then
                var = {m.weight:size(2), m.weight:size(1)}
            elseif m.__typename == 'nn.TemporalConvolution' then
                var = {m.weight:size(2), m.weight:size(1)}
            end
            if var then
	            var = 2/(var[1] + var[2])
	            m.weight=torch.randn(m.weight:size()):mul(torch.sqrt(var));
	            m.bias=torch.zeros(m.bias:size());
	            print (m.weight:size(),var,torch.var(m.weight));
	        end
        end
    end

    return model
end



path_to_vanilla='/home/SSD3/maheen-data/horse_project/vanilla/vanilla_original.dat'
out_file='/home/SSD3/maheen-data/horse_project/vanilla/vanilla_scratch_bn.dat';

model=torch.load(path_to_vanilla);
-- print (model);

model:insert(nn.BatchNormalization(100),18);
model:insert(nn.SpatialBatchNormalization(64),14);
model:insert(nn.SpatialBatchNormalization(64),10);
model:insert(nn.SpatialBatchNormalization(48),6);
model:insert(nn.SpatialBatchNormalization(16),2);
-- model:add(nn.View(5,2));
-- print (model);

model = makeXavierGaussian(model);
print (model);

cudnn.convert(model,cudnn);
print (model);

torch.save(out_file,model);

model=model:cuda();

local input=torch.rand(torch.LongStorage{32,3,40,40});
print (input:size())
local output=model:forward(input:cuda());
print (output:size());
