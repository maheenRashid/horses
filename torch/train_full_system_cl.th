require 'image'
npy4th = require 'npy4th'
require 'data_aflw';
require 'cunn'
require 'cudnn'
require 'nn';
require 'optim'
require 'stn'
npy4th=require 'npy4th';
require 'torchx';
require 'gnuplot';
dump=require 'dump';
tps_helper=require 'tps_helper';
visualize=require 'visualize';

function createIntegratedModel(tps_model_path,face_detection_model,full_size)
    local locnet = torch.load(tps_model_path);
    local tranet=nn.Transpose({2,3},{3,4})
    local concat=nn.ConcatTable()
    concat:add(tranet)
    concat:add(locnet)

    local net=nn.Sequential();
    net:add(concat)
    net:add(nn.BilinearSamplerBHWD())
    local spanet;

    if full_size then
        spanet=net;
        spanet:add(nn.Transpose({3,4},{2,3}));
    else
        local downGrid=nn.Sequential();
        downGrid:add(nn.Identity());

        local paranet=nn.ParallelTable();
        paranet:add(net);
        paranet:add(downGrid);

        spanet=nn.Sequential();
        spanet:add(paranet);
        spanet:add(nn.BilinearSamplerBHWD());
        spanet:add(nn.Transpose({3,4},{2,3}));
    end
    
    local tot_net=nn.Sequential();
    tot_net:add(spanet);
    local kp_net=torch.load(face_detection_model);
    tot_net:add(kp_net);
    cudnn.convert(tot_net,cudnn);

    return tot_net;
end

function getDownSampleGrid(batchSize)
    local out_grids_new=torch.zeros(40,40,2);
    for r=1,out_grids_new:size(1) do
        for c=1,out_grids_new:size(2) do
            out_grids_new[{r,c,1}]=-1+(1/20*r);
            out_grids_new[{r,c,2}]=-1+(1/20*c);
        end
    end
    out_grids_new=out_grids_new:view(1,out_grids_new:size(1),out_grids_new:size(2),out_grids_new:size(3));
    out_grids_new=torch.repeatTensor(out_grids_new,batchSize,1,1,1);
    return out_grids_new;
end

function getLossD(pred_output_all,gt_output_all)
	-- print (pred_output_all:size())
	-- print (gt_output_all:size());
	loss_all=torch.zeros(pred_output_all:size()):type(pred_output_all:type());

	for im_idx=1,pred_output_all:size(1) do

		local gt_output=gt_output_all[im_idx];
		local pred_output=pred_output_all[im_idx];

		local gt_index = gt_output[{{},3}];
		local gt_output = gt_output[{{},{1,2}}]:clone();
		gt_output=gt_output:view(gt_output:nElement());
		
		local x = pred_output-gt_output;
		local loss = torch.zeros(x:size(1),1);
		for i=1,loss:size(1) do
			local loss_curr=x[i];
			if gt_index[math.floor((i+1)/2)]<0 then
				loss[i]=0;
			else
                if torch.abs(loss_curr)<1 then
                    loss[i]=loss_curr;
				elseif loss_curr<0 then
					loss[i]=-1;
				else
					loss[i]=1;
				end
			end
		end
        loss_all[im_idx]=loss;

	end
	return loss_all;
end

function getLoss(pred_output_all,gt_output_all)
	loss_all=torch.zeros(pred_output_all:size(1)):type(pred_output_all:type());

	for im_idx=1,pred_output_all:size(1) do

		local gt_output=gt_output_all[im_idx];
		local pred_output=pred_output_all[im_idx];

		local gt_index=gt_output[{{},3}];
		local gt_output=gt_output[{{},{1,2}}]:clone();
		gt_output=gt_output:view(gt_output:nElement());
		local x = torch.abs(pred_output-gt_output);
		local loss = torch.zeros(x:size(1));
		local loss_total=0;
		for i=1,loss:size(1) do
			local loss_curr=x[i];
			if gt_index[math.floor((i+1)/2)]<0 then
				loss[i]=0;
			else
				if loss_curr<1 then
					loss[i]=loss_curr*loss_curr*0.5;
				else
					loss[i]=loss_curr-0.5;
				end
				loss_total=loss_total+loss[i];
                -- if (loss_total>10) then
                --     print ('____');
                --     print (i)
                --     print (gt_index)
                --     print (loss_total);
                --     print (pred_output);
                --     print (gt_output);
                -- end
			end
		end

		loss = loss_total/torch.sum(gt_index:gt(0));
		loss_all[im_idx]=loss;

	end
	return torch.mean(loss_all),loss_all;
end


function getLossEuclidean(pred_output_all,gt_output_all)
    loss_all=torch.zeros(pred_output_all:size(1)):type(pred_output_all:type());

    for im_idx=1,pred_output_all:size(1) do

        local gt_output=gt_output_all[im_idx];
        local pred_output=pred_output_all[im_idx];

        local gt_index=gt_output[{{},3}];
        local idx_keep=torch.find(gt_index:gt(0), 1)
        -- print (pred_output,gt_output,idx_keep)
        local gt_output=gt_output[{{},{1,2}}]:clone();

        pred_output=pred_output:view(pred_output:size(1)/2,2);
        -- print (gt_output,pred_output)
        local loss=torch.pow(torch.sum(torch.pow(pred_output-gt_output,2),2),0.5);
        local loss_keep=torch.zeros(#idx_keep):type(pred_output:type());
        for idx_idx_keep=1,#idx_keep do
            loss_keep[idx_idx_keep]=loss[idx_keep[idx_idx_keep]];
        end
        loss_all[im_idx]=torch.mean(loss_keep);
    end

    return torch.mean(loss_all),loss_all;
end

function doTheForward(batch_inputs,batch_targets,saveImage)
    gradParameters:zero()
    local batch_inputs_view;
    if saveImage then
        batch_inputs_view=batch_inputs:double():clone();
    end

    local inputs;
    if ds_grid then
        inputs={batch_inputs,ds_grid:clone()}
    else
        inputs=batch_inputs;    
    end
    local midoutputs=net:get(1):forward(inputs);

    local midoutputs_view;
    if saveImage then
        midoutputs_view=midoutputs:double():clone();
    end

    midoutputs=tps_helper:switchMeans(midoutputs,td.params.imagenet_mean,td.mean_im,td.std_im)
    -- print ('mean',torch.mean(midoutputs));

    local outputs=net:get(2):forward(midoutputs);
    
    local tps_layer;
    if ds_grid then
        tps_layer= net:get(1):get(1):get(1):get(1):get(2);
        tps_layer=tps_layer:get(#tps_layer);
    else
        tps_layer= net:get(1):get(1):get(2);
        tps_layer=tps_layer:get(#tps_layer);
    end

    local t_pts=tps_helper:getPointsOriginalImage(outputs,tps_layer.output)

    if saveImage then
        -- local t_pts_copy=t_pts:clone();
        local outputs_view=outputs:view(outputs:size(1),outputs:size(2)/2,2):clone();
        local t_pts_view=t_pts:view(t_pts:size(1),t_pts:size(2)/2,2):clone();
        local colors={{255,0,0},{255,255,0},{0,0,255},{0,255,0},{255,0,255}};
   
        visualizer=Visualize();
        t_pts_view=t_pts_view:transpose(2,3)
        visualizer:saveBatchImagesWithKeypoints(batch_inputs_view,t_pts_view,{saveImage,'_org.jpg'},td.params.imagenet_mean,{-1,1},colors);
        visualizer:saveBatchImagesWithKeypoints(midoutputs_view,outputs_view:transpose(2,3),{saveImage,'.jpg'},td.params.imagenet_mean,{-1,1},colors);
    end

    local dloss = getLossD(t_pts,batch_targets);
    local loss = getLoss(t_pts,batch_targets);
    return loss,dloss,midoutputs,inputs;
end


function doTheForwardEuclidean(batch_inputs,batch_targets,saveImage)
    gradParameters:zero()
    local batch_inputs_view;
    if saveImage then
        batch_inputs_view=batch_inputs:double():clone();
    end

    local inputs;
    if ds_grid then
        inputs={batch_inputs,ds_grid:clone()}
    else
        inputs=batch_inputs;    
    end
    local midoutputs=net:get(1):forward(inputs);

    local midoutputs_view;
    if saveImage then
        midoutputs_view=midoutputs:double():clone();
    end

    midoutputs=tps_helper:switchMeans(midoutputs,td.params.imagenet_mean,td.mean_im,td.std_im)
    -- print ('mean',torch.mean(midoutputs));

    local outputs=net:get(2):forward(midoutputs);
    
    local tps_layer;
    if ds_grid then
        tps_layer= net:get(1):get(1):get(1):get(1):get(2);
        tps_layer=tps_layer:get(#tps_layer);
    else
        tps_layer= net:get(1):get(1):get(2);
        tps_layer=tps_layer:get(#tps_layer);
    end

    local t_pts=tps_helper:getPointsOriginalImage(outputs,tps_layer.output)

    if saveImage then
        -- local t_pts_copy=t_pts:clone();
        local outputs_view=outputs:view(outputs:size(1),outputs:size(2)/2,2):clone();
        local t_pts_view=t_pts:view(t_pts:size(1),t_pts:size(2)/2,2):clone();
        local colors={{255,0,0},{255,255,0},{0,0,255},{0,255,0},{255,0,255}};
   
        visualizer=Visualize();
        t_pts_view=t_pts_view:transpose(2,3)
        visualizer:saveBatchImagesWithKeypoints(batch_inputs_view,t_pts_view,{saveImage,'_org.jpg'},td.params.imagenet_mean,{-1,1},colors);
        visualizer:saveBatchImagesWithKeypoints(midoutputs_view,outputs_view:transpose(2,3),{saveImage,'.jpg'},td.params.imagenet_mean,{-1,1},colors);
    end

    -- local dloss = getLossD(t_pts,batch_targets);
    local loss,loss_all = getLossEuclidean(t_pts,batch_targets);
    return loss,loss_all,midoutputs,inputs;
end



local fevalScore = function(x)
    if x ~= parameters then
	    parameters:copy(x)
    end
    
    td:getTrainingData();
    td.training_set.data=td.training_set.data:cuda();
    td.training_set.label=td.training_set.label:cuda();
	local batch_inputs=td.training_set.data;
	local batch_targets=td.training_set.label;

    local loss,dloss,midoutputs,inputs=doTheForward(batch_inputs,batch_targets);

    local grad_mid=net:get(2):backward(midoutputs, dloss);
    -- if full_back_prop then
    --     print ('full_back_proping')
    --     local std_rep=td.std_im:view(1,td.std_im:size(1),td.std_im:size(2),td.std_im:size(3)):clone();
    --     std_rep=torch.repeatTensor(std_rep,grad_mid:size(1),1,1,1):type(grad_mid:type());
    --     grad_mid=torch.cdiv(grad_mid,std_rep);    
    --     -- net:get(2):backward(midoutputs,dloss);
    --     net:get(1):backward(inputs, grad_mid);
    -- end
    
    return loss, gradParameters;
end

-- function plotLossFigure(losses,losses_iter,val_losses,val_losses_iter,out_file_loss_plot) 
-- 	gnuplot.pngfigure(out_file_loss_plot)
-- 	-- print (out_file_loss_plot)
-- 	local losses_tensor = torch.Tensor{losses_iter,losses};
--     if #val_losses>0 then
--     	local val_losses_tensor=torch.Tensor{val_losses_iter,val_losses}
-- 		gnuplot.plot({'Train Loss',losses_tensor[1],losses_tensor[2]},{'Val Loss',val_losses_tensor[1],val_losses_tensor[2]});
-- 		gnuplot.grid(true)
-- 	else
-- 		gnuplot.plot({'Train Loss ',losses_tensor[1],losses_tensor[2]});

-- 	end
-- 	gnuplot.title('Losses'..losses_iter[#losses_iter])
-- 	gnuplot.xlabel('Iterations');
-- 	gnuplot.ylabel('Loss');
-- 	gnuplot.plotflush();
-- 	-- gnuplot.pngfigure(out_file_loss_plot);
-- end

function testOld(params)
    local data_path=params.data_path;
    local out_dir=params.outDir
    local net_file=params.model
    if params.limit<0 then
        params.limit=nil;
    end
    
    val_data_path= params.val_data_path

    paths.mkdir(out_dir);
    local out_dir_images=paths.concat(out_dir,'test_images');
    paths.mkdir(out_dir_images);
    
    local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
    local out_file_loss_val_ind=paths.concat(out_dir_images,'loss_final_val_ind.npy');
    
    local out_file_log=paths.concat(out_dir_images,'log_test.txt');
    local logger=torch.DiskFile(out_file_log,'w');

    logger:writeString(dump.tostring(params)..'\n');
    -- print (params);

    cutorch.setDevice(params.gpu);


    logger:writeString(dump.tostring('loading network')..'\n');
    -- print ('loading network');

    net=torch.load(params.full_model_path);

    logger:writeString(dump.tostring('done loading network')..'\n');
    -- print ('done loading network');
    -- logger:writeString(dump.tostring(net)..'\n');
    print (net);

    logger:writeString(dump.tostring('making cuda')..'\n');
    -- print ('making cuda');
    net = net:cuda();
    net:evaluate();

    logger:writeString(dump.tostring('done')..'\n');
    -- print ('done');

    logger:writeString(dump.tostring('loading params')..'\n');
    -- print ('loading params');
    parameters, gradParameters = net:getParameters()
    logger:writeString(dump.tostring('loading done')..'\n');
    -- print ('loading done');
    logger:writeString(dump.tostring(optimState)..'\n');
    -- print (optimState)

    local data_params={file_path=val_data_path,
                    batch_size=params.batchSize,
                    mean_file=params.mean_im_path,
                    std_file=params.std_im_path,
                    augmentation=false,
                    limit=params.limit,
                    input_size={params.inputSize,params.inputSize}};

    td=data(data_params);

    data_params.input_size={224,224};
    data_params.imagenet_mean=true

    td_big=data(data_params);

    local val_losses = {};
    local val_losses_iter = {};

    local val_losses_ind={};
    local colors={{255,0,0},{255,255,0},{0,0,255},{0,255,0},{255,0,255}};
    
    local visualizer=Visualize();

    for i=1,params.iterations do

            td:getTrainingData();
            td_big:getTrainingData();

            td.training_set.data=td.training_set.data:cuda();
            td.training_set.label=td.training_set.label:cuda();

            local batch_inputs=td.training_set.data;
            local batch_targets=td.training_set.label;
            
            local outputs=net:forward(batch_inputs);
            local loss,loss_all = getLossEuclidean(outputs,batch_targets);
            for idx_ind=1,loss_all:size(1) do
                val_losses_ind[#val_losses_ind+1]=loss_all[idx_ind];
            end
            
            local outputs_view=outputs:view(outputs:size(1),outputs:size(2)/2,2):clone();
            local batch_inputs_view=batch_inputs:clone():double();
            batch_inputs_view=tps_helper:unMean(batch_inputs_view,td.mean_im,td.std_im)

            local saveImage=paths.concat(out_dir_images,i..'_');

            visualizer:saveBatchImagesWithKeypoints(batch_inputs_view,outputs_view:transpose(2,3),{saveImage,'_small.jpg'},nil,{-1,1},colors);  

            visualizer:saveBatchImagesWithKeypoints(td_big.training_set.data,outputs_view:transpose(2,3),{saveImage,'_big.jpg'},td_big.params.imagenet_mean,{-1,1},colors);

            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            -- net:training();
            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)


    end

    val_losses_ind=torch.Tensor(val_losses_ind);
    print (val_losses_ind:size())
    if val_losses_ind:size(1)>#td.lines_horse then
        val_losses_ind=val_losses_ind[{{1,#td.lines_horse}}];
    end
    print (val_losses_ind:size())
    
    disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses_ind))
    logger:writeString(dump.tostring(disp_str)..'\n');
    print(disp_str)

    npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    npy4th.savenpy(out_file_loss_val_ind, val_losses_ind)

end


function test(params)
    local data_path=params.data_path;
    local out_dir=params.outDir
    local net_file=params.model
    if params.limit<0 then
        params.limit=nil;
    end
    val_data_path= params.val_data_path

    paths.mkdir(out_dir);
    local out_dir_images=paths.concat(out_dir,'test_images');
    paths.mkdir(out_dir_images);
    local out_file_loss_val=paths.concat(out_dir_images,'loss_final_val.npy');
    local out_file_loss_val_ind=paths.concat(out_dir_images,'loss_final_val_ind.npy');
    local out_file_log=paths.concat(out_dir_images,'log_test.txt');
    local logger=torch.DiskFile(out_file_log,'w');

    logger:writeString(dump.tostring(params)..'\n');
    cutorch.setDevice(params.gpu);
    logger:writeString(dump.tostring('loading network')..'\n');
    -- print ('loading network');

    net=torch.load(params.full_model_path);
    if params.full_size then
        ds_grid=nil;
    else
        ds_grid= getDownSampleGrid(params.batchSize);
    end

    logger:writeString(dump.tostring('done loading network')..'\n');
    -- print ('done loading network');
    -- logger:writeString(dump.tostring(net)..'\n');
    print (net);

    logger:writeString(dump.tostring('making cuda')..'\n');
    -- print ('making cuda');
    net = net:cuda();
    if ds_grid then
        ds_grid = ds_grid:cuda();
    end
    net:evaluate();

    logger:writeString(dump.tostring('done')..'\n');
    -- print ('done');

    logger:writeString(dump.tostring('loading params')..'\n');
    -- print ('loading params');
    parameters, gradParameters = net:getParameters()
    logger:writeString(dump.tostring('loading done')..'\n');
    -- print ('loading done');
    logger:writeString(dump.tostring(optimState)..'\n');
    -- print (optimState)

    local data_params={file_path=val_data_path,
                    batch_size=params.batchSize,
                    mean_file=params.mean_im_path,
                    std_file=params.std_im_path,
                    augmentation=false,
                    limit=params.limit,
                    input_size={224,224},
                    imagenet_mean=true};

    
    td=data(data_params);
    

    local val_losses = {};
    local val_losses_iter = {};

    local val_losses_ind={};

    for i=1,params.iterations do

            td:getTrainingData();

            td.training_set.data=td.training_set.data:cuda();
            td.training_set.label=td.training_set.label:cuda();

            local batch_inputs=td.training_set.data;
            local batch_targets=td.training_set.label;
            
            local loss,loss_all = doTheForwardEuclidean(batch_inputs,batch_targets,paths.concat(out_dir_images,i..'_'))
            for idx_ind=1,loss_all:size(1) do
                val_losses_ind[#val_losses_ind+1]=loss_all[idx_ind];
            end
            -- gradParameters:zero()
            -- local outputs=net:forward(batch_inputs);
            -- local loss = getLoss(outputs,batch_targets);

            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            -- net:training();
            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)

    end
    val_losses_ind=torch.Tensor(val_losses_ind);
    print (val_losses_ind:size())
    if val_losses_ind:size(1)>#td.lines_horse then
        val_losses_ind=val_losses_ind[{{1,#td.lines_horse}}];
    end
    print (val_losses_ind:size())

    disp_str=string.format("minibatches processed: all, val loss = %6.6f", torch.mean(val_losses_ind))
    logger:writeString(dump.tostring(disp_str)..'\n');
    print(disp_str)

    npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    npy4th.savenpy(out_file_loss_val_ind, val_losses_ind)

end

function main(params) 

	local data_path=params.data_path;
	local out_dir=params.outDir
    local net_file=params.model
    if params.limit<0 then
    	params.limit=nil;
    end
    local val_data_path;
    local val_human_path

    full_back_prop=params.full_back_prop;
    print ('full_back_prop',full_back_prop);    
    if params.testAfter>0 then
    	val_data_path= params.val_data_path
    end
    

    paths.mkdir(out_dir);
    out_dir_debug=paths.concat(out_dir,'debug');
    print (out_dir_debug);
    paths.mkdir(out_dir_debug);
    local out_dir_intermediate=paths.concat(out_dir,'intermediate');
    local out_dir_final=paths.concat(out_dir,'final');
    paths.mkdir(out_dir_intermediate);
    paths.mkdir(out_dir_final);
    
    local out_file_net=paths.concat(out_dir_final,'model_all_final.dat');
    local out_file_loss=paths.concat(out_dir_final,'loss_final.npy');
    local out_file_loss_val=paths.concat(out_dir_final,'loss_final_val.npy');
    
    local out_file_intermediate_pre = paths.concat(out_dir_intermediate,'model_all_');
    local out_file_loss_intermediate_pre = paths.concat(out_dir_intermediate,'loss_all_');

    local out_file_loss_plot=paths.concat(out_dir_intermediate,'loss_all.png');
    local out_file_log=paths.concat(out_dir_intermediate,'log.txt');
    local logger=torch.DiskFile(out_file_log,'w');

	
    -- log = torch.DiskFile(out_file_log,'w');
    -- log:writeString(params);
    -- local str_curr;
    -- str_curr=
    logger:writeString(dump.tostring(params)..'\n');
    print (params);

    cutorch.setDevice(params.gpu);

    local optimState       
    local optimMethod      

	optimMethod = optim.adam
	optimState={learningRate=params.learningRate,learningRateDecay=params.learningRateDecay ,beta1=params.beta1 ,beta2=params.beta2 ,epsilon=params.epsilon }


    logger:writeString(dump.tostring('loading network')..'\n');
    print ('loading network');

    net=createIntegratedModel(params.tps_model_path,params.face_detection_model_path,params.full_size);
    net:training();
    
    -- if not params.full_back_prop then
    --     print ('making ev');
    --     net:get(1):evaluate();
    -- end

    if params.full_size then
        ds_grid=nil;
    else
        ds_grid= getDownSampleGrid(params.batchSize);
    end
    
    -- net = torch.load(net_file);
    logger:writeString(dump.tostring('done loading network')..'\n');
    print ('done loading network');
    -- logger:writeString(dump.tostring(net)..'\n');
    -- print (net);

    logger:writeString(dump.tostring('making cuda')..'\n');
    print ('making cuda');
    net = net:cuda();
    if ds_grid then
        ds_grid = ds_grid:cuda();
    end

    logger:writeString(dump.tostring('done')..'\n');
    print ('done');

    logger:writeString(dump.tostring('loading params')..'\n');
    print ('loading params');
    parameters, gradParameters = net:getParameters()
    logger:writeString(dump.tostring('loading done')..'\n');
    print ('loading done');
    logger:writeString(dump.tostring(optimState)..'\n');
    print (optimState)

    local data_params={file_path=data_path,
					batch_size=params.batchSize,
					mean_file=params.mean_im_path,
					std_file=params.std_im_path,
					augmentation=params.augmentation,
					limit=params.limit,
                    input_size={224,224},
                    imagenet_mean=true};

	td=data(data_params);

    if params.testAfter>0 then
    	data_params.file_path = params.val_data_path;
    	data_params.augmentation=false;
    	vd=data(data_params);
	end
    

    local losses = {};
    local losses_iter = {};

    local val_losses = {};
    local val_losses_iter = {};

    local visualizer=Visualize();

    for i=1,params.iterations do

        local _, minibatch_loss = optimMethod(fevalScore,parameters, optimState)
        losses[#losses + 1] = minibatch_loss[1] -- append the new loss        
        losses_iter[#losses_iter +1] = i;

        if i%params.dispAfter==0 then
        	local disp_str=string.format("lr: %6s, minibatches processed: %6s, loss = %6.6f", optimState.learningRate,i, losses[#losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print (disp_str);

            local str_score=''..losses[#losses];
            
            if str_seg=='nan' or str_score=='nan' then
                logger:writeString(dump.tostring('QUITTING')..'\n');
                print('QUITTING');
                break;
            end

            

        end


        if i%params.testAfter==0 and params.testAfter>0 then 
            net:evaluate();
            vd:getTrainingData();

            vd.training_set.data=vd.training_set.data:cuda();
			vd.training_set.label=vd.training_set.label:cuda();

			local batch_inputs=vd.training_set.data;
			local batch_targets=vd.training_set.label;
		    
            local loss = doTheForward(batch_inputs,batch_targets)
		    -- gradParameters:zero()
		    -- local outputs=net:forward(batch_inputs);
		    -- local loss = getLoss(outputs,batch_targets);

            val_losses[#val_losses+1]=loss;
            val_losses_iter[#val_losses_iter+1]=i;

            -- if params.full_back_prop then
                net:training();
            -- else
            --     print ('making training');
            --     net:get(2):training();
            -- end
            disp_str=string.format("minibatches processed: %6s, val loss = %6.6f", i, val_losses[#val_losses])
            logger:writeString(dump.tostring(disp_str)..'\n');
            print(disp_str)
        end

        -- check if model needs to be saved. save it.
        -- also save losses
        if i%params.saveAfter==0 then
            local out_file_intermediate=out_file_intermediate_pre..i..'.dat';
            
            if params.full_back_prop then
                torch.save(out_file_intermediate,net);
            else
                print ('saving intermediate');
                torch.save(out_file_intermediate,net);
            end
            
            local out_file_loss_intermediate=out_file_loss_intermediate_pre..i..'.npy';
            npy4th.savenpy(out_file_loss_intermediate, torch.Tensor(losses))
            
            if params.testAfter>0 then 
                local out_file_loss_intermediate=out_file_loss_intermediate_pre..i..'_val.npy';
                npy4th.savenpy(out_file_loss_intermediate, torch.Tensor(val_losses))
            end
        end

        if i%params.dispPlotAfter==0 then
        	visualizer:plotLossFigure(losses,losses_iter,val_losses,val_losses_iter,out_file_loss_plot);
        end

	end

    -- save final model
    -- if params.full_back_prop then
        torch.save(out_file_net,net);
    -- else
    --     torch.save(out_file_net,net);
    -- end

    npy4th.savenpy(out_file_loss, torch.Tensor(losses))
    
    if params.testAfter>0 and #val_losses>0 then
        npy4th.savenpy(out_file_loss_val, torch.Tensor(val_losses))
    end
    visualizer:plotLossFigure(losses,losses_iter,val_losses,val_losses_iter,out_file_loss_plot);
end



cmd = torch.CmdLine()
cmd:text()
cmd:text('Train Full network')
cmd:text()
cmd:text('Options')

local epoch_size=56;

-- cmd:option('-model','/home/SSD3/maheen-data/horse_project/vanilla/vanilla_scratch_bn.dat','model to load')

cmd:option('-tps_model_path','/home/SSD3/maheen-data/temp/tps_train_allKP_adam_noBad_bn/final/model_all_final.dat');

-- cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/temp/vanilla_train_bn_check/intermediate/model_all_3444_fcScratch.dat');
-- cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_fcScratch_halfBack_1e-2/final/model_all_final_kp_part.dat');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_fcScratch_halfBack_1e-2','directory to write output');
-- cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_40_mean.png');
-- cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_40_std.png');
-- cmd:option('-full_size',false,'whether to downscale between nets');


-- cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/horse_project/vanilla_train_face_big/intermediate/model_all_16762.dat');
cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_big_halfBack_1e-2/final/model_all_final_kp_part.dat');
cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_big_halfBack_1e-2/resume_1e-3','directory to write output');
cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');
cmd:option('-full_size',true,'whether to downscale between nets');

cmd:option('-limit',-1,'num of training data to read');
cmd:option('-iterations',30*epoch_size,'num of iterations to run');
cmd:option('-saveAfter',10*epoch_size,'num of iterations after which to save model');
cmd:option('-batchSize',64,'batch size');
cmd:option('-testAfter',30,'num iterations after which to get validation loss');
cmd:option('-dispAfter',1,'num iterations after which to display training loss');
cmd:option('-dispPlotAfter',30,'num iterations after which to display training loss');

-- cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_check/aflw/pairs_val.txt')
-- cmd:option('-data_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_train.txt')

-- cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_padded/horse/pairs_val.txt')
-- cmd:option('-data_path','/home/SSD3/maheen-data/horse_project/data_padded/horse/pairs.txt')
cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_check/horse/pairs_val.txt')
cmd:option('-data_path','/home/SSD3/maheen-data/horse_project/data_check/horse/pairs.txt')

cmd:option('learningRate', 1e-2)
cmd:option('learningRateDecay',5e-6)
cmd:option('beta1', 0.9)
cmd:option('beta2', 0.999)
cmd:option('epsilon', 1e-8)
cmd:option('augmentation' , true);

cmd:option('-gpu',1,'gpu to run the training on');

cmd:option('-full_back_prop',false,'whether to back prop through spatial net as well');
params = cmd:parse(arg)
-- main(params);

-- cmd:option('-tps_model_path','/home/SSD3/maheen-data/temp/tps_train_allKP_adam_noBad_bn/final/model_all_final.dat');
-- cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/horse_project/vanilla_train_face_big/intermediate/model_all_16762.dat');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_big_halfBack_1e-2','directory to write output');
-- cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
-- cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');
-- cmd:option('-full_size',true,'whether to downscale between nets');
-- -- params = cmd:parse(arg)
-- -- main(params);

-- cmd:option('-face_detection_model_path','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_big_halfBack_1e-2/final/model_all_final.dat');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_big_halfBack_1e-2/dummy','directory to write output');
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-saveAfter',10*epoch_size,'num of iterations after which to save model');
-- cmd:option('-batchSize',100,'batch size');
-- cmd:option('-testAfter',1,'num iterations after which to get validation loss');
-- cmd:option('-dispAfter',1,'num iterations after which to display training loss');


-- params = cmd:parse(arg)
-- main(params);



cmd:option('-full_model_path',paths.concat(params.outDir,'final/model_all_final.dat'),'full model path for testing');
cmd:option('-iterations',2,'num of iterations to run');
cmd:option('-batchSize',100,'batch size');
params = cmd:parse(arg)
print (params.full_model_path);
test(params)

-- cmd:option('-gpu',2,'gpu to run the training on');
-- cmd:option('-full_model_path',paths.concat(params.outDir,'intermediate/model_all_1120.dat'),'full model path for testing');
-- cmd:option('-outDir',paths.concat(params.outDir,'test_20_epoch'),'full model path for testing');
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- params = cmd:parse(arg)
-- test(params)


-- cmd:option('-gpu',2,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_full_halfBack_llr/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_full_halfBack_llr/euclidean','directory to write output');
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- test(params)

-- cmd:option('-gpu',1,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_hlr_longer/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_hlr_longer/euclidean','directory to write output');
-- cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_40_mean.png');
-- cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_40_std.png');
-- cmd:option('-inputSize',40,'size input');
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');

-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)

-- cmd:option('-full_model_path','/home/SSD3/maheen-data/horse_project/vanilla_ft_horse_1e-2/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/vanilla_ft_horse_1e-2/euclidean','directory to write output');
-- cmd:option('-inputSize',224,'input size');
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)

-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_orglr_longer/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_orglr_longer/euclidean','directory to write output');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)

-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_orglr/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_orglr/euclidean','directory to write output');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)

-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_scratch/final/model_all_final.dat','full model path for testing');
-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_scratch/euclidean','directory to write output');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)



-- cmd:option('-gpu',2,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_bn_check/intermediate/model_all_3444.dat');
-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/vanilla_train_bn_check/val','directory to write output');
-- cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_check/aflw/matches_5_val_allKP.txt')
-- cmd:option('-iterations',10,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- params = cmd:parse(arg)
-- testOld(params)




-- cmd:option('-gpu',1,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/horse_project/vanilla_ft_horse_1e-3/final/model_all_final.dat');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/vanilla_ft_horse_1e-3/euclidean','directory to write output');
-- cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_check/horse/pairs_val.txt')
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- cmd:option('-inputSize',224,'input image size');
-- cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
-- cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');
-- params = cmd:parse(arg)
-- print (params.full_model_path);
-- testOld(params)



-- cmd:option('-gpu',1,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_bn_check/intermediate/model_all_3444.dat');
-- cmd:option('-inputSize',40,'input size');

-- -- cmd:option('-full_model_path','/home/SSD3/maheen-data/horse_project/vanilla_train_face_big/intermediate/model_all_16762.dat');
-- -- cmd:option('-mean_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_mean.png');
-- -- cmd:option('-std_im_path','/home/SSD3/maheen-data/data_face_network/aflw_cvpr_224_std.png');
-- -- cmd:option('-inputSize',224,'input size');

-- cmd:option('-outDir','/home/SSD3/maheen-data/temp/distorted_humans/face_org_40','directory to write output');
-- cmd:option('-val_data_path','/home/SSD3/maheen-data/temp/distorted_humans/face_org.txt')
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');

-- params = cmd:parse(arg)
-- testOld(params)




-- cmd:option('-gpu',1,'gpu to run the training on');
-- cmd:option('-full_model_path','/home/SSD3/maheen-data/temp/vanilla_train_horse_bn_orglr/final/model_all_final.dat');
-- cmd:option('-inputSize',40,'input size');
-- cmd:option('-outDir','/home/SSD3/maheen-data/horse_project/ft_horse_allKp_gtWarp_halfBack_1e-3/ft_orglr_20epoch','directory to write output');
-- cmd:option('-val_data_path','/home/SSD3/maheen-data/horse_project/data_check/horse/matches_5_val_allKP_minLoss.txt')
-- cmd:option('-iterations',2,'num of iterations to run');
-- cmd:option('-batchSize',100,'batch size');
-- params = cmd:parse(arg)
-- testOld(params)
